services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_stack_net

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: unless-stopped
    user: "0:0"
    ports:
      - "6333:6333"
    environment:
      QDRANT__STORAGE__USE_WAL: "true"
      QDRANT__LOG_LEVEL: INFO
      QDRANT__SERVICE__GRPC_PORT: 6334
    volumes:
      - ./data/qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "curl -fsSL http://localhost:6333/healthz || exit 0"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - ai_stack_net

  embed-api:
    build:
      context: .
      dockerfile: Dockerfile.embed
    container_name: embed-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      MODEL_NAME: sentence-transformers/all-MiniLM-L6-v2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - ai_stack_net

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "${N8N_PORT}:5678"
    environment:
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE}
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_HOST: ${N8N_HOST}
      N8N_PROTOCOL: ${N8N_PROTOCOL}
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data/n8n_data:/home/node/.n8n
      - /Users/brian/AI_Assistant/inbox:/data/inbox    # ðŸ‘ˆ gives container access to your host folder
      - /Users/brian/AI_Assistant/archive:/data/archive  # ðŸ‘ˆ optional archive location
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - ai_stack_net

  ocr-api:
    build:
      context: .
      dockerfile: Dockerfile.ocr
    container_name: ocr-api
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - /Users/brian/AI_Assistant/inbox:/app/inbox
    environment:
      TZ: America/Los_Angeles
    networks:
      - ai_stack_net

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    restart: unless-stopped
    ports:
      - "${WEBUI_PORT:-3001}:8080"
    environment:
      # === RAG & local vector search integration ===
      ENABLE_RAG_HYBRID_SEARCH: "true"
      VECTOR_DB: "qdrant"
      QDRANT_URI: "http://qdrant:6333"
      QDRANT_API_KEY: ${QDRANT_API_KEY}
      QDRANT_ON_DISK: "true"
      QDRANT_PREFER_GRPC: "false"

      # === Embedding and content extraction endpoints ===
      RAG_EMBEDDING_MODEL: "http://embed-api:8000/embed"
      CONTENT_EXTRACTION_ENGINE: "http://ocr-api:8001/file"

      # === Optional RAG tuning ===
      RAG_TOP_K: "5"
      RAG_MIN_SCORE: "0.2"

      # === LLM / API settings (optional, safe to leave blank) ===
      OLLAMA_API_BASE_URL: "http://host.docker.internal:11434"
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_API_BASE_URL: "https://api.openai.com/v1"
      OPENAI_API_TYPE: "openai"
      HF_TOKEN: ${HF_TOKEN}

    volumes:
      - ./data/webui_data:/app/backend/data

    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      embed-api:
        condition: service_started
      ocr-api:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - ai_stack_net

    deploy:
      resources:
        limits:
          memory: 6g

volumes:
  postgres_data:
  qdrant_data:
  n8n_data:
  webui_data:

networks:
  ai_stack_net:
    driver: bridge